from celery import shared_task
import ffmpeg
import os
from django.conf import settings
from .models import VideoRecording
from google.cloud import speech_v1p1beta1 as speech
import speech_recognition as sr
from pydub import AudioSegment
from django.conf import settings
import io
from assemblyai import Transcriber


@shared_task
def extract_audio_from_video(video_id):
    try:
        video_recording = VideoRecording.objects.get(id=video_id)
        video_path = video_recording.video.path

        audio_path = video_path.replace('.webm', '.mp3')

        ffmpeg.input(video_path).output(audio_path).run()

        with open(audio_path, 'rb') as audio_file:
            video_recording.audio_file.save(os.path.basename(audio_path), audio_file)
            video_recording.save()

            convert_speech_to_text.delay(video_recording.id)
        print(f'Audio extraction successful for video ID {video_id}')

        os.remove(audio_path)

    except Exception as e:
        print(f'An error occurred: {e}')


@shared_task
def convert_speech_to_text(recording_id):
    try:
        recording = VideoRecording.objects.get(id=recording_id)

        audio_file = recording.audio_file.path
        file_extension = os.path.splitext(audio_file)[1].lower()

        if file_extension != '.wav':
            sound = AudioSegment.from_file(audio_file)
            temp_wav_path = 'temp.wav' 
            sound.export(temp_wav_path, format='wav')
            audio_file = temp_wav_path 

        r = sr.Recognizer()
        with sr.AudioFile(audio_file) as source:
            audio = r.record(source)

        try:
            text = r.recognize_google(audio)
            print(f"Transcription: {text}")
            recording.transcript_text = text 
            recording.save()  

        except sr.UnknownValueError:
            print("Google Speech Recognition could not understand the audio")
        except sr.RequestError as e:
            print(f"Could not request results from Google Speech Recognition service; {e}")

        if file_extension != '.wav' and os.path.exists(temp_wav_path):
            os.remove(temp_wav_path)

    except Exception as e:
        print(f"An error occurred: {e}")


import os
from dotenv import load_dotenv
load_dotenv()

from llama_index.llms.gemini import Gemini

llm = Gemini(api_key=os.getenv("GOOGLE_API_KEY"), temperature=0.7)

# response = llm.complete("What is the capital of France?")

# print(response)
from hiring_app.models import *
from .models import *
@shared_task
def generate_score(user_id):
    user_info = User.objects.get(id=user_id)
    question = Question.objects.filter(user=user_info)
    video_record = VideoRecording.objects.filter(user=user_info)
    total_score = 0 
    for i in video_record:

        user_answer = i.transcript_text
        question =  Question.objects.get(text=i.question.text)
        given_question = question.text

        query1 = f'''Consider you are a applicant for an interview in a specific company for a role.
        Given a question below, answer for the question with a maximum of 5 lines like you are a applicant for the interview. 
        NOTE: You are not allowed to copy the question in the answer and avoid any extra generation other than the answer for the question.
        Question : {given_question}'''

        AI_response = llm.complete(query1)
        print(AI_response.text)


        query2 = f'''Consider you are a interviewer ina a specific company.
        Given a question, actual answer and the answer generated by the applicant.
        Compare both the answers for the question and provide your feedback on the answer generated by the applicant in the form of a score out of 100.
        NOTE: You are not allowed to copy the question, actual answer and avoid any extra generation other than the score for the answer.Format should be like score/100
        Question : {question}
        Actual Answer : {AI_response.text}
        Applicant Answer : {user_answer}'''

        score_response = llm.complete(query2)
        print(score_response.text)

        total_score+=eval(score_response.text)
    print(total_score)
    
    resume_details = ResumeDetails.objects.get(user=user_info)
    resume_details.video_score=(total_score/3)*100
    print(resume_details.video_score)
    print((total_score/3)*100)
    resume_details.save()
    print(" successfully scored the video ")
